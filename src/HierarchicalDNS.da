from Logger import Logger
import Filenames
import random
import pickle
from Cache import LRUCache
from pprint import pformat
import time

# Usage:
# getNameBasedOnLevel("shikhar.io", 0) => "io"
# getNameBasedOnLevel("shikhar.io", 1) => "shikhar"
# getNameBasedOnLevel("shikhar.io", 2) => None
def getNameBasedOnLevel(periodSeparatedName, level):
    nameList = periodSeparatedName.split(".")[::-1]
    return nameList[level] if (level < len(nameList) and level >= 0) else None

class HierarchicalNode(process):
    def setup(config, TLD, level, nextNode):
        self.finished = False
        self.name = "<HierarchicalNode>"
        self.nextNode = nextNode
        self.TLD = TLD
        self.level = level
        self.logger = Logger(Filenames.getDNSLogFilename(config))
        self.names = set()
        self.startCPUTime = None
        self.endCPUTime = None

        domainNamesFile = open(Filenames.getDomainNamesFilename(config), "rb")
        domainsStruct = pickle.load(domainNamesFile)
        domainNamesFile.close()

        domainNames = domainsStruct['domainNames']
        for domainName in domainNames:
            tld = getNameBasedOnLevel(domainName, 0)
            if tld == self.TLD:
                partialName = getNameBasedOnLevel(domainName, level+1)
                self.names.add(partialName)
    
    def receive(msg=('NODE_LOOKUP_QUERY', query,), from_= dns):
        self.logger.write(self.name + " received ('NODE_LOOKUP_QUERY', " + str(query) + ",) from " + str(dns))
        
        partialName = getNameBasedOnLevel(query['name'], query['level'])
        exists = True if partialName in self.names else False
        nextNode = self.nextNode if exists else None
        
        state = 'NODE_LOOKUP_RESULT'
        query['numHops'] += 1
        self.logger.write(self.name + " sending ('" + state + "', " + str(query) + ", " + str(exists) + ", " + str(nextNode) + ",) to " + str(dns))
        send((state, query, exists, nextNode,), to=dns)

    def receive(msg=('GET_STATS',), from_= dns):
        self.endCPUTime = time.process_time()
        self.logger.write(self.name + " received ('GET_STATS',) from " + str(dns))
        state = 'STATS_RESULT'
        stats = {'CPUTime':None, 'cardinality':None}
        stats['CPUTime'] = self.endCPUTime - self.startCPUTime
        stats['cardinality'] = len(self.names)
        self.logger.write(self.name + " sending ('" + state + "', " + str(stats) + ") to " + str(dns))
        send((state, stats,), to=dns)
        self.finished = True

    def run():
        self.startCPUTime = time.process_time()
        await(self.finished)

class HierarchicalDNS(process):
    def setup(config, master):
        self.master = master
        self.config = config
        self.name = "<HierarchicalDNS>"
        self.logger = Logger(Filenames.getDNSLogFilename(config))
        self.logger.write(self.name + " setup")
        self.finished = False
        self.cache = LRUCache(config['LRUCacheSize'])
        self.statsReceivedCount = 0
        self.CPUTimes = []
        self.cardinalities = []

        self.randomizer = random.Random()
        self.randomizer.seed(config['seedDNS'])

        domainNamesFile = open(Filenames.getDomainNamesFilename(config), "rb")    
        domainsStruct = pickle.load(domainNamesFile)
        domainNamesFile.close()
        
        self.TLDs = domainsStruct['TLDs']
        
        # create new nodes for each TLD
        # assign these nodes to TLDs
        self.TLDNodes = {}
        self.nodes = []
        for tld in self.TLDs:
            #TODO: save this node so that we can send GET_STATS: already saved!!
            self.TLDNodes[tld] = list(new(HierarchicalNode, num=1))[0]
            self.nodes.append(self.TLDNodes[tld])
            tldNodesList = list(new(HierarchicalNode, num=(config['levels']-2)))
            self.nodes.extend(tldNodesList)
            tldNodesList.insert(0, self.TLDNodes[tld])
            tldNodesList.append(None)
            # now, tldNodesList looks like [comNode(containing google, apple,...), googleNode(containing www, mail,...),None]
            for level in range(len(tldNodesList) - 1): # -1 because last element is None
                node = tldNodesList[level]
                nextNode = tldNodesList[level + 1]
                setup(node, (config, tld, level, nextNode,))
                start(node)
                #TODO: save this node so that we can send GET_STATS

    def run():
        self.logger.write(self.name + " running")
        await(self.finished)
    
    def receive(msg=('LOOKUP_QUERY', query,), from_= client):
        self.logger.write(self.name + " received ('LOOKUP_QUERY', " + str(query) + ",) from " + str(client))
        
        if self.config['caching']:
            result = self.cache.get(query['name'])
            if result != None:
                query['resolvedByCache'] = True
                query['result'] = result
                sendResponseToClient(query)
                return

        query['level'] = 0
        partialName = getNameBasedOnLevel(query['name'], query['level'])
        
        if partialName in self.TLDNodes:
            query['level'] += 1
            query['numHops'] += 1
            state = 'NODE_LOOKUP_QUERY'
            nextNode = self.TLDNodes[partialName]
            self.logger.write(self.name + " sending ('" + state + "', " + str(query) + ",) to " + str(nextNode))
            send((state, query,), to=nextNode)
        else:
            if self.config['caching']:
                self.cache.put(query['name'], False)
            query['result'] = False
            sendResponseToClient(query)


    def sendResponseToClient(query):
        state = 'LOOKUP_RESULT'
        query['numHops'] += 1
        self.logger.write(self.name + " sending ('" + state + "', " + str(query) + ",) to " + str(query['client']))
        send((state, query,), to=query['client'])

    def receive(msg=('NODE_LOOKUP_RESULT', query, exists, nextNode,), from_= internalNode):
        if exists:
            if nextNode:
                query['level'] += 1
                query['numHops'] += 1
                state = 'NODE_LOOKUP_QUERY'
                self.logger.write(self.name + " sending ('" + state + "', " + str(query) + ",) to " + str(nextNode))
                send((state, query,), to=nextNode)
            else:
                # lookup complete
                query['result'] = True
                if self.config['caching']:
                    self.cache.put(query['name'], True)
                sendResponseToClient(query)

        else: # not found
            # return failure to client 
            if self.config['caching']:
                self.cache.put(query['name'], False)
            query['result'] = False
            sendResponseToClient(query)


    def receive(msg=('STATS_RESULT', stats,), from_= node):
        state = "STATS_RESULT"
        self.logger.write(self.name + " received ('" + state + "'," + str(stats) + ") from " + str(node))
        self.CPUTimes.append(stats['CPUTime'])
        self.cardinalities.append(stats['cardinality'])
        self.statsReceivedCount += 1
        if self.statsReceivedCount == len(self.nodes):
            stats = {'CPUTimes':self.CPUTimes, 'cardinalities':self.cardinalities}
            self.logger.write(self.name + " sending ('" + state + "', " + str(stats) + ") to " + str(self.master))
            send((state, stats,), to=self.master)
            self.finished = True

    def receive(msg=('GET_STATS',), from_= master):
        state = "GET_STATS"
        self.logger.write(self.name + " received ('" + state + "',) from " + str(master))
        for node in self.nodes:
            self.logger.write(self.name + " sending ('" + state + "',) to " + str(node))
            send((state,), to=node)