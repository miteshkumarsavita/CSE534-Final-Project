from Logger import Logger
import Filenames
import random
import hasher
from Cache import LRUCache
from config import *
import pickle
import time

def inRangeExclusiveModulo(value, rangeStart, rangeEnd):
    if rangeStart < rangeEnd:
        return rangeStart < value and value < rangeEnd
    else:
        return not (rangeEnd <= value and value <= rangeStart)

def inRangeRightInclusiveModulo(value, rangeStart, rangeEnd):
    if rangeStart < rangeEnd:
        return rangeStart < value and value <= rangeEnd
    else:
        return not (rangeEnd < value and value <= rangeStart)

def rotateList(list, index):
    return list[-index:] + list[:-index]

class FingerTableEntry:
    def __init__(self, node, hashedVal):
        self.node = node
        self.hashedVal = hashedVal
    def __repr__(self):
        return str(self.node) + ": " + str(self.hashedVal)

class FingerTable:
    def __init__(self, nodes, selfNode):
        self.table = []
        self.selfHash = hasher.getHashChord(selfNode, chordSystemVarM)
        
        # make a list of hash values for nodes in nodes list.
        nodesHashList = []
        for node in nodes:
            nodesHashList.append(hasher.getHashChord(node, chordSystemVarM))
        # make finger table for this node
        for i in range(chordSystemVarM):
            n = 2**i
            nextVal = (nodesHashList[nodes.index(selfNode)] + n) % 2**chordSystemVarM
            try:
                nodeHash = max(filter(lambda x: x < nextVal, nodesHashList))
            except ValueError:
                # this is the case when hash value comes 0.
                nodeHash = nodesHashList[0]
            # if hash is same as nextVal, assign the same node    
            if nodeHash != nextVal:
                index = (nodesHashList.index(nodeHash) + 1) % len(nodes)
            else:
                index = nodesHashList.index(nodeHash)
            node = nodes[index]
            self.table.append(FingerTableEntry(node, hasher.getHashChord(node, chordSystemVarM)))
            

    def getClosestPrecedingNode(self, lookupHashedVal):
        # start from the end
        for i in range(len(self.table)-1, -1, -1):
            entry = self.table[i]
            if inRangeExclusiveModulo(entry.hashedVal, self.selfHash, lookupHashedVal):
                return entry.node
        return None # shouldn't happen? TODO:confirm
    
    def getSuccessorEntry(self):
        return self.table[0]

class ChordNode(process):
    def setup(config, nodes):
        self.name = "<ChordNode>"
        self.finished = False
        self.names = set()
        self.cache = LRUCache(config['LRUCacheSize'])
        self.caching = config['caching']
        self.logger = Logger(Filenames.getDNSLogFilename(config))
        self.startCPUTime = None
        self.endCPUTime = None

        # rotate the list of nodes so that selfNode is at the head of the list
        nodes = rotateList(nodes, -1 * nodes.index(self))

        #TODO: save domainNames that belong to this node
        domainNamesFile = open(Filenames.getDomainNamesFilename(config), "rb")
        domainsStruct = pickle.load(domainNamesFile)
        domainNamesFile.close()
        domainNames = domainsStruct['domainNames']
        
        selfNodeHash = hasher.getHashChord(nodes[0], chordSystemVarM)
        predecessorNodeHash = hasher.getHashChord(nodes[-1], chordSystemVarM)
        for domainName in domainNames:
            hashedVal = hasher.getHashChord(domainName, chordSystemVarM)
            if inRangeRightInclusiveModulo(hashedVal, predecessorNodeHash, selfNodeHash):
                self.names.add(domainName)

        self.fingerTable = FingerTable(nodes, self)
        self.selfNodeHash = selfNodeHash

    def sendCacheMessagesToNodesInPath(query):
        state = 'CACHE_LOOKUP'
        for node in query['path']:
            self.logger.write(self.name + " sending ('" + state + "', " + str(query) + ",) to " + str(node))
            send((state,query,), to=node)

    def receive(msg=('NODE_LOOKUP_QUERY', query,), from_= p):
        self.logger.write(self.name + " received ('NODE_LOOKUP_QUERY', " + str(query) + ",) from " + str(p))
        
        # check cache; if found send response and return
        result = self.cache.get(query['name'])
        if result != None:
            query['result'] = result
            query['resolvedByCache'] = True
            sendResponseToClient(query)
            sendCacheMessagesToNodesInPath(query)
            return

        query['path'].append(self)
        
        successorEntry = self.fingerTable.getSuccessorEntry()
        if inRangeRightInclusiveModulo(query['hashedVal'], self.selfNodeHash, successorEntry.hashedVal):
            # successor is responsible for this name
            state  = 'NODE_LOOKUP_FINAL'
            query['numHops'] += 1
            self.logger.write(self.name + " sending ('" + state + "'," + str(query) + ") to " + str(successorEntry.node))
            send((state, query,), to=successorEntry.node)
        else:
            node = self.fingerTable.getClosestPrecedingNode(query['hashedVal'])
            state  = 'NODE_LOOKUP_QUERY'
            query['numHops'] += 1
            self.logger.write(self.name + " sending ('" + state + "'," + str(query) + ") to " + str(node))
            send((state, query,), to=node)

    def receive(msg=('NODE_LOOKUP_FINAL', query,), from_= p):
        # this node is responsible for this query. That's why it was sent this message=> 'NODE_LOOKUP_FINAL'
        self.logger.write(self.name + " received ('NODE_LOOKUP_FINAL', " + str(query) + ",) from " + str(p))
        
        # check if this node contains this name
        query['result'] = True if query['name'] in self.names else False
        sendResponseToClient(query)

        if self.caching:
            sendCacheMessagesToNodesInPath(query)


    def receive(msg=('CACHE_LOOKUP', query,), from_= internalNode):
        self.logger.write(self.name + " received ('CACHE_LOOKUP', " + str(query) + ",) from " + str(internalNode))
        # no need to check self.caching. This is only called when caching is turned on
        self.cache.put(query['name'], query['result'])

    def receive(msg=('GET_STATS',), from_= DNS):
        self.endCPUTime = time.process_time()
        self.logger.write(self.name + " received ('GET_STATS',) from " + str(DNS))
        state = 'STATS_RESULT'
        stats = {'CPUTime':None, 'cardinality':None}
        stats['CPUTime'] = self.endCPUTime - self.startCPUTime
        stats['cardinality'] = len(self.names)
        self.logger.write(self.name + " sending ('" + state + "', " + str(stats) + ") to " + str(DNS))
        send((state, stats,), to=DNS)
        self.finished = True

    def sendResponseToClient(query):
        state = 'LOOKUP_RESULT'
        query['numHops'] += 1
        self.logger.write(self.name + " sending ('" + state + "', " + str(query) + ",) to " + str(query['client']))
        send((state, query,), to=query['client'])
        

    def run():
        self.startCPUTime = time.process_time()
        await(self.finished)

class ChordDNS(process):
    def setup(config, master):
        self.master = master
        self.config = config
        self.name = "<ChordDNS>"
        self.logger = Logger(Filenames.getDNSLogFilename(config))
        self.logger.write(self.name + " setup")
        self.finished = False
        self.CPUTimes = []
        self.cardinalities = []
        self.statsReceivedCount = 0

        self.randomizer = random.Random()
        self.randomizer.seed(config['seedDNS'])

        self.nodes = list(new(ChordNode, num=config['nNodes']))
        self.nodes.sort(key=lambda obj : hasher.getHashChord(obj, chordSystemVarM))
        for node in self.nodes:
            setup(node, (config, self.nodes,))
            start(node)

    def run():
        self.logger.write(self.name + " running")
        await(self.finished)

    def receive(msg=('LOOKUP_QUERY', query,), from_= client):
        self.logger.write(self.name + " received ('LOOKUP_QUERY', " + str(query) + ",) from " + str(client))
        query['path'] = [self]
        query['hashedVal'] = hasher.getHashChord(query['name'], chordSystemVarM)
        node = self.randomizer.choice(self.nodes)
        state  = 'NODE_LOOKUP_QUERY'
        query['numHops'] += 1
        self.logger.write(self.name + " sending ('" + state + "'," + str(query) + ") to " + str(node))
        send((state, query,), to=node)
        
    # this handler is never called in our design
    # since the node that has the result directly sends it to the client
    def receive(msg=('NODE_LOOKUP_RESULT', query,), from_= internalNode):
        #TODO: this code only runs when this is final result
        state = 'LOOKUP_RESULT'
        query['numHops'] += 1
        self.logger.write(self.name + " sending ('" + state + "', " + str(query) + ",) to " + str(query['client']))
        send((state, query,), to=query['client'])

    def receive(msg=('GET_STATS',), from_= master):
        self.logger.write(self.name + " received ('GET_STATS',) from " + str(master))
        state = 'GET_STATS'
        # stats = {'dummyValue':23}
        # send((state, stats,), to=master)
        # self.finished = True
        for node in self.nodes:
            self.logger.write(self.name + " sending ('" + state + "',) to " + str(node))
            send((state,), to=node)

    def receive(msg=('STATS_RESULT', stats), from_= node):
        self.logger.write(self.name + " received ('GET_STATS', " + str(stats) + ") from " + str(node))
        self.CPUTimes.append(stats['CPUTime'])
        self.cardinalities.append(stats['cardinality'])
        self.statsReceivedCount += 1
        if self.statsReceivedCount == len(self.nodes):
            state = 'STATS_RESULT'
            stats = {'CPUTimes':self.CPUTimes, 'cardinalities':self.cardinalities}
            self.logger.write(self.name + " sending ('" + state + "', " + str(stats) + ") to " + str(self.master))
            send((state, stats,), to=self.master)
            self.finished = True