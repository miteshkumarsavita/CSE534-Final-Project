from Logger import Logger
import Filenames
import random
import time
from RequestGenerator import RequestGenerator
import numpy as np

class Client(process):
    def setup(config, dns, master):
        self.master = master
        self.config = config
        self.dns = dns
        self.name = "<Client>"
        self.logger = Logger(Filenames.getClientLogFilename(config))
        self.logger.write(self.name + " setup")
        self.finished = False
        self.curReqIndex = 0
        self.latencies = []
        self.numHops = []

        self.processingStartTime = None
        self.processingEndTime = None
        self.startCPUTime = None
        self.endCPUTime = None
        self.requestGenerator = RequestGenerator(Filenames.getDomainNamesFilename(config), config['subset'], config['seedClient'])
        

    def run():
        self.logger.write(self.name + " running")
        self.startCPUTime = time.process_time()
        self.processingStartTime = time.perf_counter()

        for i in range(self.config['nReq']):
            query = self.requestGenerator.getNext()
            query['client'] = self
            query['startTime'] = time.perf_counter()
            query['numHops'] = 1
            state = 'LOOKUP_QUERY'
            self.logger.write(self.name + " sending ('" + state + "', " + str(query) + ",) to " + str(self.dns))
            send((state, query,), to=self.dns)
        
        await(self.finished)
    

    def receive(msg=('LOOKUP_RESULT', query), from_= p):
        self.logger.write(self.name + " received ('LOOKUP_RESULT', " + str(query) + ",) from " + str(p))
        query['endTime'] = time.perf_counter()
        #TODO: save this somewhere so that we can calculate latency
        self.latencies.append(query['endTime'] - query['startTime'])
        self.numHops.append(query['numHops'])
        self.curReqIndex += 1
        if self.curReqIndex == self.config['nReq']:
            clientDone()

    def clientDone():
        self.processingEndTime = time.perf_counter()
        self.endCPUTime = time.process_time()
        stats = {'latencyStats': {'min':None, 'max':None, 'mean':None, 'stddev':None}, 
                 'throughput':None,
                 'nHops': {'min':None, 'max':None, 'mean':None, 'stddev':None}}
        
        #TODO:crunch numbers
        stats['latencyStats']['min'] = np.min(self.latencies)
        stats['latencyStats']['max'] = np.max(self.latencies)
        stats['latencyStats']['mean'] = np.mean(self.latencies)
        stats['latencyStats']['stddev'] = np.std(self.latencies)

        stats['throughput'] = self.config['nReq']/(self.processingEndTime - self.processingStartTime)

        stats['nHops']['min'] = np.min(self.numHops)
        stats['nHops']['max'] = np.max(self.numHops)
        stats['nHops']['mean'] = np.mean(self.numHops)
        stats['nHops']['stddev'] = np.std(self.numHops)

        target = self.master
        state = 'CLIENT_DONE'
        self.logger.write(self.name + " sending ('" + state + "', " + str(stats) + ",) to " + str(target))
        send((state, stats,), to=target)
        self.finished = True