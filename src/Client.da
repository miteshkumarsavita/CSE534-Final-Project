from Logger import Logger
import Filenames
import random
import time
from RequestGenerator import RequestGenerator

class Client(process):
    def setup(config, dns, master):
        self.master = master
        self.config = config
        self.dns = dns
        self.name = "<Client>"
        self.logger = Logger(Filenames.getClientLogFilename(config))
        self.logger.write(self.name + " setup")
        self.finished = False
        self.curReqIndex = 0

        self.processingStartTime = None
        self.processingEndTime = None
        self.startCPUTime = None
        self.endCPUTime = None
        self.requestGenerator = RequestGenerator(Filenames.getDomainNamesFilename(config), config['subset'], config['seedClient'])
        

    def run():
        self.logger.write(self.name + " running")
        self.startCPUTime = time.process_time()
        self.processingStartTime = time.perf_counter()

        for i in range(self.config['nReq']):
            query = self.requestGenerator.getNext()
            query['client'] = self
            query['startTime'] = time.perf_counter()
            state = 'LOOKUP_QUERY'
            self.logger.write(self.name + " sending ('" + state + "', " + str(query) + ",) to " + str(self.dns))
            send((state, query,), to=self.dns)
        
        await(self.finished)
    

    def receive(msg=('LOOKUP_RESULT', query), from_= p):
        self.logger.write(self.name + " received ('LOOKUP_RESULT', " + str(query) + ",) from " + str(p))
        query['endTime'] = time.perf_counter()
        #TODO: save this somewhere so that we can calculate latency
        self.curReqIndex += 1
        if self.curReqIndex == self.config['nReq']:
            clientDone()

    def clientDone():
        self.processingEndTime = time.perf_counter()
        self.endCPUTime = time.process_time()

        state = 'CLIENT_DONE'
        stats = {'dummyValue':23}
        target = self.master
        self.logger.write(self.name + " sending ('" + state + "', " + str(stats) + ",) to " + str(target))
        send((state,stats,), to=target)
        self.finished = True