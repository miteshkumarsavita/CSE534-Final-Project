from Logger import Logger
import Filenames
from pprint import pformat
from config import *
from DomainNameGenerator import createDomainNameFileIfNotExists
import pickle
import Experiments


HierarchicalDNS = import_da('HierarchicalDNS')
ChordDNS = import_da('ChordDNS')
Client = import_da('Client')

class Master(process):
    def setup(config):
        self.config = config
        self.finished = False
        self.name = "<Master>"
        self.nextHExpIndex = 0
        self.nextCExpIndex = 0
        self.curDNSExp = None
        self.clientStats = None
        self.curConfig = None

        Filenames.createAllFolders(config)
        self.logger = Logger(Filenames.getMasterLogFilename(config))

        self.hExps = Experiments.createExperiments(config, hierarchical)
        self.cExps = Experiments.createExperiments(config, chord)
        self.logger.write(str(len(self.hExps)) + " hierarchical experiments created")
        self.logger.write(str(len(self.cExps)) + " chord experiments created")
    
    def run():
        startNextExperiment()
        await(self.finished)
        print("All experiments done!")

    def receive(msg=('CLIENT_DONE', stats,), from_= client):
        self.logger.write(self.name + " received ('EXPERIMENT_DONE'," + str(stats) + ") from " + str(client))
        self.clientStats = stats
        self.logger.write(self.name + " sending ('GET_STATS',) to " + str(self.curDNSExp))
        send(('GET_STATS',), to=self.curDNSExp)

    # received from self.curDNSExp
    def receive(msg=('STATS_RESULT',stats,), from_= dns):
        self.logger.write(self.name + " received ('STATS_RESULT'," + str(stats) + ") from " + str(dns))
        stats = {'dns': stats, 'client': self.clientStats}

        fileHandle = open(Filenames.getStatsPickleFilename(self.curConfig), "wb")
        fileHandle.truncate()
        pickle.dump(stats, fileHandle)
        fileHandle.close()

        fileHandle = open(Filenames.getStatsFilename(self.curConfig), "w")
        fileHandle.truncate()
        fileHandle.write(pformat(stats))
        fileHandle.close()

        print("Experiment Done")
        print()

        incrementExperimentIndex()
        startNextExperiment()

    def incrementExperimentIndex():
        if self.nextHExpIndex < len(self.hExps):
            self.nextHExpIndex += 1
        elif self.nextCExpIndex < len(self.cExps):
            self.nextCExpIndex += 1
        else:
            self.finished = True

    def startNextExperiment():
        #TODO: send requests filename to dns so that it can populate itself
        # before starting the client
        if self.nextHExpIndex < len(self.hExps):
            # we need to run a hierarchical DNS experiment
            self.curConfig = exp = self.hExps[self.nextHExpIndex]
            createDomainNameFileIfNotExists(exp)
            
            self.curDNSExp = hDNS = new(HierarchicalDNS.HierarchicalDNS, num=1)
            setup(hDNS, (exp, self,)) #TODO: domains file
            
            status = "Starting HierarchicalDNS experiment " + str(self.nextHExpIndex+1)
            print(status)
            self.logger.write(status)
            start(hDNS)
        
        elif self.nextCExpIndex < len(self.cExps):
            # we need to run a Chord based DNS experiment
            self.curConfig = exp = self.cExps[self.nextCExpIndex]
            createDomainNameFileIfNotExists(exp)

            self.curDNSExp = cDNS = new(ChordDNS.ChordDNS, num=1)
            setup(cDNS, (exp, self,)) #TODO: domains file
            
            status = "Starting ChordDNS experiment " + str(self.nextCExpIndex+1)
            print(status)
            self.logger.write(status)
            start(cDNS)
        else:
            self.finished = True
            return
        
        client = new(Client.Client, num=1)
        setup(client, (exp, self.curDNSExp, self,))
        start(client)


