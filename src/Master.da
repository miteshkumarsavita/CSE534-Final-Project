from Logger import Logger
import Filenames
import copy
from pprint import pformat
from config import *
from DomainNameGenerator import createDomainNameFileIfNotExists

#import time
#import os
#import pickle
#from mapper import getCoordinatorIndex, getCoordinator
#import random

HierarchicalDNS = import_da('HierarchicalDNS')
ChordDNS = import_da('ChordDNS')
Client = import_da('Client')

class Master(process):
    def setup(config):
        self.config = config
        self.finished = False
        self.name = "<Master>"
        self.nextHExpIndex = 0
        self.nextCExpIndex = 0
        self.currentDNSExp = None

        Filenames.createAllFolders(config)
        self.logger = Logger(Filenames.getMasterLogFilename(config))

        self.hExps = createExperiments(config, hierarchical)
        self.cExps = createExperiments(config, chord)
        self.logger.write(str(len(self.hExps)) + " hierarchical experiments created")
        self.logger.write(str(len(self.cExps)) + " chord experiments created")
    
    def run():
        startNextExperiment()
        await(self.finished)
        print("All experiments done!")

    def createBaseConfig(config):
        attrsToKeep = ["name", "nReq", "subset", "levels", "nNames", "nTLD", "seeds"]
        baseConfig = {}
        for k in config:
            if k in attrsToKeep:
                baseConfig[k] = config[k]
        return baseConfig

    def createExperiments(config, type):
        result = []
        baseConfig = createBaseConfig(config)
        
        exps = config['experiments'] if 'experiments' in config else None
        if not exps: exps = config[type]['experiments'] if 'experiments' in config[type] else None
        
        if exps:
            for exp in exps:
                modifiedConfig = copy.deepcopy(baseConfig)
                modifiedConfig['type'] = type
                modifiedConfig['caching'] = False
                for k in exp:
                    modifiedConfig[k] = exp[k]
                result.append(modifiedConfig)

                #same as above but caching on
                modifiedConfig = copy.deepcopy(modifiedConfig)
                modifiedConfig['caching'] = True
                result.append(modifiedConfig)
        return result

    def receive(msg=('CLIENT_DONE', stats,), from_= p):
        self.logger.write(self.name + " received ('EXPERIMENT_DONE'," + str(stats) + ") from " + str(p))
        self.logger.write(self.name + " sending ('GET_STATS',) to " + str(self.currentDNSExp) )
        send(('GET_STATS',), to= self.currentDNSExp)

    # received from self.currentDNSExp
    def receive(msg=('STATS_RESULT',stats,), from_= p):
        self.logger.write(self.name + " received ('STATS_RESULT'," + str(stats) + ") from " + str(p))
        #TODO: write stats to file
        
        print("Experiment Done")
        print()

        incrementExperimentIndex()
        startNextExperiment()

    def incrementExperimentIndex():
        if self.nextHExpIndex < len(self.hExps):
            self.nextHExpIndex += 1
        elif self.nextCExpIndex < len(self.cExps):
            self.nextCExpIndex += 1
        else:
            self.finished = True

    def startNextExperiment():
        if self.nextHExpIndex < len(self.hExps):
            # we need to run a hierarchical DNS experiment
            exp = self.hExps[self.nextHExpIndex]
            createDomainNameFileIfNotExists(exp)
            
            self.currentDNSExp = hDNS = new(HierarchicalDNS.HierarchicalDNS, num=1)
            setup(hDNS, (exp, self,)) #TODO: domains file
            
            status = "Starting HierarchicalDNS experiment " + str(self.nextHExpIndex+1)
            print(status)
            self.logger.write(status)
            start(hDNS)
        
        elif self.nextCExpIndex < len(self.cExps):
            # we need to run a Chord based DNS experiment
            exp = self.cExps[self.nextCExpIndex]
            createDomainNameFileIfNotExists(exp)

            self.currentDNSExp = cDNS = new(ChordDNS.ChordDNS, num=1)
            setup(cDNS, (exp, self,)) #TODO: domains file
            
            status = "Starting ChordDNS experiment " + str(self.nextCExpIndex+1)
            print(status)
            self.logger.write(status)
            start(cDNS)
        else:
            self.finished = True
            return
        
        client = new(Client.Client, num=1)
        setup(client, (exp, self,))
        start(client)


