---------------------------------------------------------
STRUCTURE OF CONFIG FILE
Root of the json file will have common config options for both hierarchical (H)
as well as chord based (C) DNS system.

Root will also contain two sub-objects "hierarchical", "chord" to define any specific configuration options 
for H and C respectively

---------------------------------------------------------
WHAT TO MEASURE (RECORD)

-----for each lookup----
latency : min, max, mean, std dev
throughput: number of requests processed per second
hopsPerLookup: number of nodes that had to be contacted to fulfill this request
resolvedByCache (boolean)

----for each node------
#number of messages sent (this can be used later to calculate avg message per request)
CPU time: time used by the process (just to get an idea of how much work C does as compared to H)
Queries processed by this node

HOW TO MEASURE
time: https://docs.python.org/3.6/library/time.html#time.perf_counter
CPU time: https://docs.python.org/3/library/time.html#time.process_time

---------------------------------------------------------
RELATIONSHIP bw CONFIG AND EXPERIMENTS
For each config file, we will generate FOUR stat/log files for the following FOUR experiments:
H, caching-off
H, caching-on
C, caching-off
C, caching-no

---------------------------------------------------------
LOGGING and STATS

log files will contain basic messages (msg received, sending message, debug msgs, etc.)
Note: we will turn off logging when running the final experiments (because IO to file is expensive)

stat files will contain all the measured quantities, and the seeds used
Note: we will have two versions of stat files with the same data: one human-readable txt file, and a pickle file
that can be used later to do analysis, make graphs, etc.

---------------------------------------------------------
FOLDER STRUCTURE

Each config will have its own folder in each of these folders: [stats, logs]
In turn, this folder will contain four files for the four variations of experiments as mentioned in 'RELATIONSHIP bw CONFIG AND EXPERIMENTS'

---------------------------------------------------------
EXPERIMENTS

------defaults------- (if not specified explicitly)

nReq=5000

chordNodes=10

levels=4
e.g. level('www.google.com') = 3; level('mail.cs.stonybrook.edu')=4

subset=1
if subset=1, all domains are considered for request
if subset=f where f is any fraction less than 1, we only consider that fraction of the total domains that we have
for sending requests. This is helpful if we want to see the effect of caching
----------------------

Note: all experiments will have two variations: one with caching turned off and one with on
Note: all experiments will have a graph with four curves for 4 combs of (H, C) x (caching-off, caching-on)

EXP 1: effect of increasing the levels of domain names:
name: "levels"
level: 2 to 10 step 1
(we expect latency for H to increase as level increases)

EXP 2: effect of increasing chord Nodes
name: "nodes"
chordNodes: 2 to 20 step 1
(note: we should see latency for C increasing as nChordNodes increases)

EXP 3: effect of caching if some requests are repeated
name: "repeat"
subset=0.10 to 0.01 step -0.01
(we expect latency for both C and H to decrease as subset decreases)

EXP 4: lookup for non-existent entries
two ways to generate non-existent lookpus:
(a) completely random non-existent entries, which might fail at the first node, or 
(b) some intelligent queries that only fail at a particular level.
    e.g. non-existent.google.com will fail at `non-existent` in H, but will immediately in C
We will perform both experiments, and decide based on the results which one to report

---------------------------------------------------------
RANDOM NUMBER GENERATION
Since we want the experiments to be fair, all experiments will use the same seed to generate requests, same seed to select subset, and to make other client-side decisions
We will also have a seed that is used to make decisions in the internal code of H and C, but that can be different (if we want) since the internals are completely different
I think it's a good idea to keep the same 'internal' seed for all experiments (we can think more about this)

# Generating seed
seed = int.from_bytes(os.urandom(32), 'big')

# seeding randomizer
randomizer = random.Random()
randomizer.seed(seed)

# using randomizer (one way)
randomizer.random()

# using randomizer (another way)
randomizer.choice([1, 2, 3])

---------------------------------------------------------
POPULATING THE DNS

Based on the `levels` variable in the config file, a domains file is created that contains all the domain names we will have in our experiment
(note: this file is only created if it does not already exist)

This domains file is parsed and then used to populate the H and C DNS systems

---------------------------------------------------------
SETUP OF THE EXPERIMENT

-----Different kinds of processes-----

EXPERIMENT-RUNNER
main process that runs all the experiments
Reads in a config file, and makes config objects for each experiment mentioned in `experiments` in the config, and also based on "RELATIONSHIP bw CONFIG AND EXPERIMENTS"
For example, if the experiment is "levels" as mentioned in "EXPERIMENTS" section. Then, a new config is generated for each `level`, and 4 further configs for each
So, if "levels" config has 10 experiments, then, we will be running 10 x 4 = 40 experiments
-Passes each generated config to MASTER

MASTER
main process that coordinates all other processes
after running experiments, gets stats from different processes, crunches numbers, and writes to stat files

CLIENT
Used to generate lookups requests
Note: we plan to make the client asynchronous, i.e., it will continuously send request (e.g. in a for-loop) without waiting for the result of an earlier request
We believe this will result in higher throughput, although it might have a small negative effect on latency.
Note: another option we have is to have multiple clients sending requests to the DNS system, but we think this is equivalent to sending multiple async requests through one client, so probably, we won't bother with this

H system
This is the hierachical DNS system process.
It will have public {methods/message handlers} for initialization, population, and lookups.
It will also have stat message handlers which will be called at the end by master to collect this process's stats.
TODO: add hierarchical DNS image


C system
This is the Chord based DNS system process.
It will have public {methods/message handlers} for initialization, population, and lookups.
It will also have stat message handlers which will be called at the end by master to collect this process's stats.
This will be a simple chord ring based on the paper "Chord: A Scalable Peer-to-Peer Lookup Protocol for Internet Applications" by Stoica et al.

---------------------------------------------------------

